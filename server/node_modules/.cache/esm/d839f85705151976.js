let bcrypt,_,formatErrors,tryLogin;_051‍.x([["default",()=>_051‍.o]]);_051‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_051‍.w("lodash",[["default",["_"],function(v){_=v}]]);_051‍.w("../formatErrors",[["default",["formatErrors"],function(v){formatErrors=v}]]);_051‍.w("../auth",[["tryLogin",["tryLogin"],function(v){tryLogin=v}]]);






_051‍.d({
  Query: {
    getUser: (parent, { id }, { models }) => models.User.findOne({ where: { id } }),
    allUsers: (parent, args, { models }) => models.User.findAll(),
  },
  Mutation: {
    login: (parent, { email, password }, { models, SECRET, SECRET2 }) =>
      tryLogin(email, password, models, SECRET, SECRET2),
    register: async (parent, args, { models }) => {
      try {
        const user = await models.User.create(args);

        return {
          ok: true,
          user,
        };
      } catch (err) {
        return {
          ok: false,
          errors: formatErrors(err, models),
        };
      }
    },
  },
});
