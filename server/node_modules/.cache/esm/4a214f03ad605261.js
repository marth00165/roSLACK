let makeExecutableSchema,path,fileLoader,mergeTypes,mergeResolvers,cors,models;_ad6‍.w("graphql-tools",[["makeExecutableSchema",["makeExecutableSchema"],function(v){makeExecutableSchema=v}]]);_ad6‍.w("path",[["default",["path"],function(v){path=v}]]);_ad6‍.w("merge-graphql-schemas",[["fileLoader",["fileLoader"],function(v){fileLoader=v}],["mergeTypes",["mergeTypes"],function(v){mergeTypes=v}],["mergeResolvers",["mergeResolvers"],function(v){mergeResolvers=v}]]);_ad6‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_ad6‍.w("./models",[["default",["models"],function(v){models=v}]]);const express = require('express');
const { ApolloServer, gql} = require('apollo-server-express');





const types = fileLoader(path.join(__dirname, './schema'));
const resolversArray = fileLoader(path.join(__dirname, './resolvers'));

const typeDefs = mergeTypes(types);



const resolvers = mergeResolvers(resolversArray);




const PORT = 8081;
const app = express();
app.use(cors('*'))





const schema = makeExecutableSchema({
  typeDefs,
  resolvers,
});

const graphqlEndpoint = '/graphql';






const server = new ApolloServer({
  schema,
  context: {
    models,
    user: {
      id: 1,
    },


  }


 });
server.applyMiddleware({ app });

models.sequelize.sync({}).then(() => {
  app.listen({ port: PORT }, () =>
    console.log(`🚀 Server ready at http://localhost:8081${graphqlEndpoint}`)
  )
})
