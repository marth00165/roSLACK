let express,ApolloServer,gql,makeExecutableSchema,createServer,execute,subscribe,SubscriptionServer,path,fileLoader,mergeTypes,mergeResolvers,cors,models,jwt,refreshTokens;_b96‍.w("express",[["default",["express"],function(v){express=v}]]);_b96‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);_b96‍.w("graphql-tools",[["makeExecutableSchema",["makeExecutableSchema"],function(v){makeExecutableSchema=v}]]);_b96‍.w("http",[["createServer",["createServer"],function(v){createServer=v}]]);_b96‍.w("graphql",[["execute",["execute"],function(v){execute=v}],["subscribe",["subscribe"],function(v){subscribe=v}]]);_b96‍.w("subscriptions-transport-ws",[["SubscriptionServer",["SubscriptionServer"],function(v){SubscriptionServer=v}]]);_b96‍.w("path",[["default",["path"],function(v){path=v}]]);_b96‍.w("merge-graphql-schemas",[["fileLoader",["fileLoader"],function(v){fileLoader=v}],["mergeTypes",["mergeTypes"],function(v){mergeTypes=v}],["mergeResolvers",["mergeResolvers"],function(v){mergeResolvers=v}]]);_b96‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_b96‍.w("./models",[["default",["models"],function(v){models=v}]]);_b96‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_b96‍.w("./auth",[["refreshTokens",["refreshTokens"],function(v){refreshTokens=v}]]);












const types = fileLoader(path.join(__dirname, './schema'));
const resolversArray = fileLoader(path.join(__dirname, './resolvers'));

const SECRET = 'madaraUchihaWasInnocent';
const SECRET2 = 'El_curry'

const typeDefs = mergeTypes(types);



const resolvers = mergeResolvers(resolversArray);














const PORT = 8081;
const app = express();
app.use(cors('*'))

const addUser = async (req, res, next) => {
  const token = req.headers['x-token'];
  if (token) {
    try {
      const { user } = jwt.verify(token, SECRET);
      req.user = user;
    } catch (err) {
      const refreshToken = req.headers['x-refresh-token'];
      const newTokens = await refreshTokens(token, refreshToken, models, SECRET, SECRET2);
      if (newTokens.token && newTokens.refreshToken) {
        res.set('Access-Control-Expose-Headers', 'x-token, x-refresh-token');
        res.set('x-token', newTokens.token);
        res.set('x-refresh-token', newTokens.refreshToken);
      }
      req.user = newTokens.user;
    }
  }
  next();
};

app.use(addUser);





const schema = makeExecutableSchema({
  typeDefs,
  resolvers,
});

const graphqlEndpoint = '/graphql';

const server = new ApolloServer({
  schema,
  context:({req}) => {
  return {
      user: req.user,
     SECRET,
     SECRET2,
    models,
  }
}

});
server.applyMiddleware({ app });

const wsserver = createServer(server);

models.sequelize.sync({}).then(() => {
  server.listen(PORT, () => {
      new SubscriptionServer({
        execute,
        subscribe,
        schema: schema,
      }, {
        server: wsServer,
        path: '/subscriptions',
      });
    console.log(`🚀 Server ready at http://localhost:8081${graphqlEndpoint}`)
  });
})
