let makeExecutableSchema,path,fileLoader,mergeTypes,mergeResolvers,cors,models,jwt,refreshTokens;_31a‍.w("graphql-tools",[["makeExecutableSchema",["makeExecutableSchema"],function(v){makeExecutableSchema=v}]]);_31a‍.w("path",[["default",["path"],function(v){path=v}]]);_31a‍.w("merge-graphql-schemas",[["fileLoader",["fileLoader"],function(v){fileLoader=v}],["mergeTypes",["mergeTypes"],function(v){mergeTypes=v}],["mergeResolvers",["mergeResolvers"],function(v){mergeResolvers=v}]]);_31a‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_31a‍.w("./models",[["default",["models"],function(v){models=v}]]);_31a‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_31a‍.w("./auth",[["refreshTokens",["refreshTokens"],function(v){refreshTokens=v}]]);const express = require('express');
const { ApolloServer, gql} = require('apollo-server-express');








const types = fileLoader(path.join(__dirname, './schema'));
const resolversArray = fileLoader(path.join(__dirname, './resolvers'));

const SECRET = 'madaraUchihaWasInnocent';
const SECRET2 = 'El_curry'

const typeDefs = mergeTypes(types);



const resolvers = mergeResolvers(resolversArray);




const PORT = 8081;
const app = express();
app.use(cors('*'))

const addUser = async (req, res, next) => {
  const token = req.headers['x-token'];
  if (token) {
    try {
      const { user } = jwt.verify(token, SECRET);
      req.user = user;
    } catch (err) {
      const refreshToken = req.headers['x-refresh-token'];
      const newTokens = await refreshTokens(token, refreshToken, models, SECRET, SECRET2);
      if (newTokens.token && newTokens.refreshToken) {
        res.set('Access-Control-Expose-Headers', 'x-token, x-refresh-token');
        res.set('x-token', newTokens.token);
        res.set('x-refresh-token', newTokens.refreshToken);
      }
      req.user = newTokens.user;
    }
  }
  next();
};

app.use(addUser);





const schema = makeExecutableSchema({
  typeDefs,
  resolvers,
});

const graphqlEndpoint = '/graphql';






const server = new ApolloServer({
  schema,
  context: ({req}) => {
    user: req.user,
    models,
    SECRET,
    SECRET2
  }
});
server.applyMiddleware({ app });

models.sequelize.sync({}).then(() => {
  app.listen({ port: PORT }, () =>
    console.log(`🚀 Server ready at http://localhost:8081${graphqlEndpoint}`)
  )
})
